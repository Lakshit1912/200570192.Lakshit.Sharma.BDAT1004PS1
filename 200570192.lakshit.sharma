{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2164d3be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data type of var1: <class 'int'>\n",
      "Data type of var2: <class 'float'>\n",
      "Data type of var3: <class 'bool'>\n",
      "Data type of var4: <class 'str'>\n",
      "Data type of var5: <class 'int'>\n",
      "Data type of var6: <class 'str'>\n",
      "Data type of var7: <class 'str'>\n",
      "Data type of var8: <class 'float'>\n",
      "Data type of var9: <class 'int'>\n",
      "Data type of var10: <class 'set'>\n",
      "Data type of var11: <class 'bool'>\n",
      "Data type of var12: <class 'float'>\n"
     ]
    }
   ],
   "source": [
    "# Data types in Python\n",
    "\n",
    "# Integer\n",
    "var1 = 5\n",
    "print(f\"Data type of var1: {type(var1)}\")\n",
    "\n",
    "# Float\n",
    "var2 = 5.0\n",
    "print(f\"Data type of var2: {type(var2)}\")\n",
    "\n",
    "# Boolean\n",
    "var3 = 5 > 1\n",
    "print(f\"Data type of var3: {type(var3)}\")\n",
    "\n",
    "# String\n",
    "var4 = '5'\n",
    "print(f\"Data type of var4: {type(var4)}\")\n",
    "\n",
    "# Integer (result of an arithmetic operation)\n",
    "var5 = 5 * 2\n",
    "print(f\"Data type of var5: {type(var5)}\")\n",
    "\n",
    "# String (result of string repetition)\n",
    "var6 = '5' * 2\n",
    "print(f\"Data type of var6: {type(var6)}\")\n",
    "\n",
    "# String (result of string concatenation)\n",
    "var7 = '5' + '2'\n",
    "print(f\"Data type of var7: {type(var7)}\")\n",
    "\n",
    "# Float (result of a division operation)\n",
    "var8 = 5 / 2\n",
    "print(f\"Data type of var8: {type(var8)}\")\n",
    "\n",
    "# Integer (result of a modulo operation)\n",
    "var9 = 5 % 2\n",
    "print(f\"Data type of var9: {type(var9)}\")\n",
    "\n",
    "# Set\n",
    "var10 = {5, 2, 1}\n",
    "print(f\"Data type of var10: {type(var10)}\")\n",
    "\n",
    "# Boolean (result of a comparison)\n",
    "var11 = 5 == 3\n",
    "print(f\"Data type of var11: {type(var11)}\")\n",
    "\n",
    "# Mathematical constant Pi (requires importing math module)\n",
    "import math\n",
    "var12 = math.pi\n",
    "print(f\"Data type of var12: {type(var12)}\")\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "629746f3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The word 'Supercalifragilisticexpialidocious' has 34 letters.\n",
      "'Supercalifragilisticexpialidocious' contains the substring 'ice'.\n",
      "The longest word among the given words is: Supercalifragilisticexpialidocious\n",
      "The first composer in the dictionary is: Bartok\n",
      "The last composer in the dictionary is: Buxtehude\n"
     ]
    }
   ],
   "source": [
    "# Question (a): Calculate the number of characters in a word\n",
    "word_a = 'Supercalifragilisticexpialidocious'\n",
    "num_letters_a = len(word_a)\n",
    "print(\"The word 'Supercalifragilisticexpialidocious' has\", num_letters_a, \"letters.\")\n",
    "\n",
    "# Question (b): Check if a word contains a specific substring\n",
    "contains_ice = 'ice' in word_a\n",
    "if contains_ice:\n",
    "    print(\"'Supercalifragilisticexpialidocious' contains the substring 'ice'.\")\n",
    "else:\n",
    "    print(\"'Supercalifragilisticexpialidocious' does not contain the substring 'ice'.\")\n",
    "\n",
    "# Question (c): Find the longest word among a list of words\n",
    "word_b1 = 'Honorificabilitudinitatibus'\n",
    "word_b2 = 'Bababadalgharaghtakamminarronnkonn'\n",
    "longest_word = max(word_a, word_b1, word_b2, key=len)\n",
    "print(\"The longest word among the given words is:\", longest_word)\n",
    "\n",
    "# Question (d): Find the first and last composer in a list\n",
    "composers = ['Berlioz', 'Borodin', 'Brian', 'Bartok', 'Bellini', 'Buxtehude', 'Bernstein']\n",
    "composers.sort()  # Sort the list alphabetically\n",
    "first_composer = composers[0]\n",
    "last_composer = composers[-1]\n",
    "print(\"The first composer in the dictionary is:\", first_composer)\n",
    "print(\"The last composer in the dictionary is:\", last_composer)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "6188f85e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.7320508075688772\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def triangleArea(a, b, c):\n",
    "    # Calculate the semi-perimeter (s)\n",
    "    s = (a + b + c) / 2\n",
    "\n",
    "    # Calculate the area using Heron's formula\n",
    "    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n",
    "\n",
    "    return area\n",
    "\n",
    "# Test the function\n",
    "result = triangleArea(2, 2, 2)\n",
    "print(result)\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "197356b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input the number of elements to be stored in the array: 10\n",
      "Input 10 elements in the array:\n",
      "element - 0 : 2\n",
      "element - 1 : 3\n",
      "element - 2 : 4\n",
      "element - 3 : 5\n",
      "element - 4 : 2\n",
      "element - 5 : 4\n",
      "element - 6 : 3\n",
      "element - 7 : 5\n",
      "element - 8 : 2\n",
      "element - 9 : 7\n",
      "The Even elements are:\n",
      "2 4 2 4 2\n",
      "The Odd elements are:\n",
      "3 5 3 5 7\n"
     ]
    }
   ],
   "source": [
    "n = int(input(\"Input the number of elements to be stored in the array: \"))\n",
    "\n",
    "even_numbers = []\n",
    "odd_numbers = []\n",
    "\n",
    "print(f\"Input {n} elements in the array:\")\n",
    "for i in range(n):\n",
    "    element = int(input(f\"element - {i} : \"))\n",
    "    \n",
    "   \n",
    "    if element % 2 == 0:\n",
    "        even_numbers.append(element)\n",
    "    else:\n",
    "        odd_numbers.append(element)\n",
    "\n",
    "# Display the even and odd numbers\n",
    "print(\"The Even elements are:\")\n",
    "print(\" \".join(map(str, even_numbers)))\n",
    "\n",
    "print(\"The Odd elements are:\")\n",
    "print(\" \".join(map(str, odd_numbers)))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "72eb5b09",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n",
      "The point (1, 1) does not lie in both rectangles.\n"
     ]
    }
   ],
   "source": [
    "#a. Write a function inside(x,y,x1,y1,x2,y2) that returns True or False\n",
    "# depending on whether the point (x,y) lies in the rectangle with lower left\n",
    "# corner (x1,y1) and upper right corner (x2,y2).\n",
    "# >>> inside(1,1,0,0,2,3)\n",
    "# True\n",
    "# >>> inside(-1,-1,0,0,2,3)\n",
    "# False\n",
    "\n",
    "\n",
    "def inside(x, y, x1, y1, x2, y2):\n",
    "   \n",
    "    return x1 <= x <= x2 and y1 <= y <= y2\n",
    "\n",
    "# Test the inside function\n",
    "result1 =  inside(1,1,0,0,2,3)\n",
    "print(result1)\n",
    "\n",
    "result2 = inside(-1,-1,0,0,2,3)\n",
    "print(result2)\n",
    "\n",
    "\n",
    "# Use function inside() from part a. to write an expression that tests whether\n",
    "# the point (1,1) lies in both of the following rectangles: one with lower left\n",
    "# corner (0.3, 0.5) and upper right corner (1.1, 0.7) and the other with lower\n",
    "# left corner (0.5, 0.2) and upper right corner (1.1, 2). \n",
    "# Define the inside function (from part a)\n",
    "\n",
    "\n",
    "\n",
    "rectangle1 = inside(1, 1, 0.3, 0.5, 1.1, 0.7)\n",
    "\n",
    "\n",
    "rectangle2 = inside(1, 1, 0.5, 0.2, 1.1, 2)\n",
    "\n",
    "# Check if (1, 1) lies in both rectangles\n",
    "if rectangle1 and rectangle2:\n",
    "    print(\"The point (1, 1) lies in both rectangles.\")\n",
    "else:\n",
    "    print(\"The point (1, 1) does not lie in both rectangles.\")\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "033412e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "appyhay\n",
      "encilpay\n",
      "enterway\n",
      "otherway\n"
     ]
    }
   ],
   "source": [
    "def pig(word):\n",
    "   \n",
    "    word = word.lower()\n",
    "\n",
    " \n",
    "    vowels = \"aeiou\"\n",
    "    if word[0] in vowels:\n",
    "        \n",
    "        return word + \"way\"\n",
    "    else:\n",
    "        \n",
    "        return word[1:] + word[0] + \"ay\"\n",
    "\n",
    "# Test the pig function\n",
    "word1 = \"happy\"\n",
    "word2 = \"pencil\"\n",
    "word3 = \"enter\"\n",
    "word4 = \"Other\"\n",
    "\n",
    "print(pig(word1))  # Output: \"appyhay\"\n",
    "print(pig(word2))  # Output: \"encilpay\"\n",
    "print(pig(word3))  # Output: \"enterway\"\n",
    "print(pig(word4))  # Output: \"otherway\"\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
